{"version":3,"file":"static/js/613.e5e88ad0.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/App.styled.js","views/ContactsView.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n    position: relative;\n    display: flex;\n    align-items: center;\n    gap: 16px;\n    padding: 16px;\n\n    :hover {\n    background-color: #F0FFFF;\n    border: 1px solid;\n    }\n`;\n\nexport const Button = styled.button`\nmargin-left: 25px;\nheight: 30px;\nwidth: 130px;\ncursor: pointer;\nbackground-color: transparent;\nfont-size: 16px;\nborder-radius: 12px;\nborder: 1px solid green;\ntransition-duration: 0.4s;\n\n&:hover {\n    background-color: green; \n    color: white;\n    box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19)\n  }\n`\n\n","export const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.error;\n\nexport const selectFilter = state => state.contacts.filter;","import { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport { Container, Button } from './ContactForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\n\nexport default function ContactForm() {\n  let dispatch = useDispatch();\n  const items = useSelector(selectContacts);\n\n  const addNewContact = ({ name, phone }, setSubmitting, resetForm) => {\n    const newContact = {\n      id: nanoid(),\n      name,\n      number: phone,\n    };\n    if (items.map(item => item.name.toLowerCase().includes(\n      newContact.name.toLowerCase()\n    )).some(name => name === true))\n     {\n      alert(`${newContact.name} is already in contacts`);\n    } else {\n      dispatch(addContact(newContact));\n      setSubmitting(true);\n      resetForm()\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', phone: '' }}\n      validate={values => {\n        const errors = {};\n        if (!values.name) {\n          errors.name = 'Required';\n        } else if (\n          !/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/i.test(\n            values.name\n          )\n        ) {\n          errors.name = 'Invalid Name';\n        }\n        if (!values.phone) {\n          errors.phone = 'Required';\n        } else if (\n          !/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/i.test(\n            values.phone\n          )\n        ) {\n          errors.phone = 'Invalid Phonenumber';\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        addNewContact(values, setSubmitting, resetForm );\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <Container>\n            <p>Name</p>\n            <input\n              type=\"text\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              onChange={handleChange}\n              value={values.name}\n              onBlur={handleBlur}\n            />\n            {errors.name && touched.name && errors.name}\n          </Container>\n\n          <Container>\n            <p>Number</p>\n            <input\n              type=\"tel\"\n              name=\"phone\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              onChange={handleChange}\n              value={values.phone}\n              onBlur={handleBlur}\n            />\n            {errors.phone && touched.phone && errors.phone}\n          </Container>\n\n          <Button type=\"submit\" >\n            Add contact\n          </Button>\n        </form>\n      )}\n    </Formik>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    position: relative;\n    display: flex;\n    align-items: center;\n    gap: 16px;\n    padding: 16px;\n\n    :hover {\n    background-color: #F0FFFF;\n    border: 1px solid;\n    }\n`\n","import { Container } from './Filter.styled';\nimport { setFilter } from 'redux/contactsSlice';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst Filter = () => {\n    let dispatch = useDispatch()\n\n    let filter = useSelector(state => state.filter)\n\n    function handleFilterChange(event) {\n        dispatch(setFilter(event.target.value))\n    }\n\n    return (\n        <Container>\n            <input\n          type=\"text\"\n          name=\"name\"\n          onChange={handleFilterChange}\n          value={filter}\n        />\n        </Container>\n    )\n}\n\nexport default Filter;\n\n// import PropTypes from 'prop-types';\n// import { Container } from './Filter.styled';\n\n\n// const Filter = ({ handleFilterChange, value}) => {\n//     return (\n//         <Container>\n//             <input\n//           type=\"text\"\n//           name=\"name\"\n//           onChange={handleFilterChange}\n//           value={value}\n//         />\n//         </Container>\n//     )\n// }\n\n// export default Filter;\n\n// Filter.propTypes = {\n//     handleFilterChange: PropTypes.func.isRequired,\n//     value: PropTypes.string.isRequired\n// }\n\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n    list-style: initial;\n    margin-left: 25px;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const ListItem = styled.li`\n    margin-bottom: 15px;\n    font-size: 1.1em;\n    list-style: initial;\n`\n\nexport const Button = styled.button`\nheight: 30px;\nwidth: 130px;\ncursor: pointer;\nbackground-color: transparent;\nfont-size: 16px;\nborder-radius: 12px;\nborder: 1px solid red;\ntransition-duration: 0.4s;\n\n&:hover {\n    background-color: red; \n    color: white;\n    box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19)\n  }\n`\nexport const ContactDetail = styled.p`\n    margin-bottom: 10px;\n`","import PropTypes from 'prop-types';\nimport { List, ListItem, Button, ContactDetail } from './ContactList.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\n\nconst ContactList = ({ list }) => {\n  let dispatch = useDispatch();\n\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <List>\n      {list.map(({ id, name, number }) => (\n        <ListItem key={id}>\n          <ContactDetail>{name}</ContactDetail>\n          <ContactDetail>{number}</ContactDetail>\n          <Button type=\"button\" onClick={() => onDeleteContact(id)}>Delete contact</Button>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n      createdAt: PropTypes.string.isRequired\n    })\n  ),\n};\n\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  font-size: 1.5em;\n  color: palevioletred;\n  margin-left: 15px;\n  margin-top: 15px;\n`;","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Title } from 'components/App.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectIsLoading,\n} from 'redux/selectors';\n\nexport default function ContactsView() {\n    const dispatch = useDispatch();\n\n  const items = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      <Title>Contacts</Title>\n      <Filter />\n      {isLoading && <div>Loading....</div>}{' '}\n      {error ? (\n        <div>{error}</div>\n      ) : (\n        <ContactList\n          list={items.filter(user =>\n            user.name.toLowerCase().includes(filter.toLowerCase())\n          )}\n        />\n      )}\n    </div>\n  );\n}"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","Button","_templateObject2","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","ContactForm","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","name","phone","validate","values","errors","test","onSubmit","_ref2","_ref","setSubmitting","resetForm","newContact","id","nanoid","number","map","item","toLowerCase","includes","some","alert","concat","addContact","addNewContact","children","_ref3","touched","handleChange","handleBlur","handleSubmit","_jsxs","type","title","required","onChange","value","onBlur","event","setFilter","target","List","ListItem","_templateObject3","ContactDetail","_templateObject4","list","onClick","deleteContact","onDeleteContact","Title","ContactsView","useEffect","fetchContacts","Filter","ContactList","user"],"sourceRoot":""}